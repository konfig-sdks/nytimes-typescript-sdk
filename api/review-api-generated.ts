/* tslint:disable */
/* eslint-disable */
/*
Books API

The Books API provides information about book reviews and The New York Times Best Sellers lists.

## Best Sellers Lists Services
### List Names
The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.

```
/lists/names.json
```

### List Data

The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.

```
/lists/2019-01-20/hardcover-fiction.json
```

Use \"current\" for {date} to get the latest list.
```
/lists/current/hardcover-fiction.json
```

## Book Reviews Services

The book reviews service lets you get NYT book review by author, ISBN, or title.

```
/reviews.json?author=Michelle+Obama
```

```
/reviews.json?isbn=9781524763138
```

```
/reviews.json?title=Becoming
```

## Example Calls

```
https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey
```

```
https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey
```


The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReviewGetBookReviewsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get book reviews.
         * @summary Reviews
         * @param {number} [isbn] Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs.
         * @param {string} [title] You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20.
         * @param {string} [author] You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookReviews: async (isbn?: number, title?: string, author?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reviews.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api-key", keyParamName: "apiKey", configuration})
            if (isbn !== undefined) {
                localVarQueryParameter['isbn'] = isbn;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/reviews.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewApiAxiosParamCreator(configuration)
    return {
        /**
         * Get book reviews.
         * @summary Reviews
         * @param {ReviewApiGetBookReviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookReviews(requestParameters: ReviewApiGetBookReviewsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewGetBookReviewsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookReviews(requestParameters.isbn, requestParameters.title, requestParameters.author, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewApiFp(configuration)
    return {
        /**
         * Get book reviews.
         * @summary Reviews
         * @param {ReviewApiGetBookReviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookReviews(requestParameters: ReviewApiGetBookReviewsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReviewGetBookReviewsResponse> {
            return localVarFp.getBookReviews(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBookReviews operation in ReviewApi.
 * @export
 * @interface ReviewApiGetBookReviewsRequest
 */
export type ReviewApiGetBookReviewsRequest = {
    
    /**
    * Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs.
    * @type {number}
    * @memberof ReviewApiGetBookReviews
    */
    readonly isbn?: number
    
    /**
    * You’ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20.
    * @type {string}
    * @memberof ReviewApiGetBookReviews
    */
    readonly title?: string
    
    /**
    * You’ll need to enter the author’s first and last name, separated by a space. This space will be converted into the characters %20.
    * @type {string}
    * @memberof ReviewApiGetBookReviews
    */
    readonly author?: string
    
}

/**
 * ReviewApiGenerated - object-oriented interface
 * @export
 * @class ReviewApiGenerated
 * @extends {BaseAPI}
 */
export class ReviewApiGenerated extends BaseAPI {
    /**
     * Get book reviews.
     * @summary Reviews
     * @param {ReviewApiGetBookReviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApiGenerated
     */
    public getBookReviews(requestParameters: ReviewApiGetBookReviewsRequest = {}, options?: AxiosRequestConfig) {
        return ReviewApiFp(this.configuration).getBookReviews(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
