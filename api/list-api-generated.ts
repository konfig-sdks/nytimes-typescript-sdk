/* tslint:disable */
/* eslint-disable */
/*
Books API

The Books API provides information about book reviews and The New York Times Best Sellers lists.

## Best Sellers Lists Services
### List Names
The lists/names service returns a list of all the NYT Best Sellers Lists.  Some lists are published weekly and others monthly.  The response includes when each list was first published and last published.

```
/lists/names.json
```

### List Data

The lists/{date}/{name} service returns the books on the best sellers list for the specified date and list name.

```
/lists/2019-01-20/hardcover-fiction.json
```

Use \"current\" for {date} to get the latest list.
```
/lists/current/hardcover-fiction.json
```

## Book Reviews Services

The book reviews service lets you get NYT book review by author, ISBN, or title.

```
/reviews.json?author=Michelle+Obama
```

```
/reviews.json?isbn=9781524763138
```

```
/reviews.json?title=Becoming
```

## Example Calls

```
https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=yourkey
```

```
https://api.nytimes.com/svc/books/v3/reviews.json?author=Stephen+King&api-key=yourkey
```


The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListGetBestSellersResponse } from '../models';
// @ts-ignore
import { ListGetByDateResponse } from '../models';
// @ts-ignore
import { ListGetHistoryResponse } from '../models';
// @ts-ignore
import { ListGetNamesResponse } from '../models';
// @ts-ignore
import { OverviewResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ListApi - axios parameter creator
 * @export
 */
export const ListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all books for all the Best Sellers lists for specified date.
         * @summary Best Sellers List Full Overview
         * @param {string} [publishedDate] YYYY-MM-DD  The best-seller list publication date. You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published date, the current week\&#39;s best sellers lists will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBestSellers: async (publishedDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/full-overview.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api-key", keyParamName: "apiKey", configuration})
            if (publishedDate !== undefined) {
                localVarQueryParameter['published_date'] = publishedDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/full-overview.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Best Sellers list.  If no date is provided returns the latest list.
         * @summary Best Sellers List
         * @param {string} list The name of the Times best sellers list (hardcover-fiction, paperback-nonfiction, ...). The /lists/names service returns all the list names. The encoded list names are lower case with hyphens instead of spaces (e.g. e-book-fiction, instead of E-Book Fiction).
         * @param {string} [bestsellersDate] YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best sellers lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).
         * @param {string} [publishedDate] YYYY-MM-DD  The date the best sellers list was published on NYTimes.com (different than bestsellers-date).  Use \&quot;current\&quot; for latest list.
         * @param {number} [offset] Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBestSellers: async (list: string, bestsellersDate?: string, publishedDate?: string, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'list' is not null or undefined
            assertParamExists('getBestSellers', 'list', list)
            const localVarPath = `/lists.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api-key", keyParamName: "apiKey", configuration})
            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }

            if (bestsellersDate !== undefined) {
                localVarQueryParameter['bestsellers-date'] = bestsellersDate;
            }

            if (publishedDate !== undefined) {
                localVarQueryParameter['published-date'] = publishedDate;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get top 5 books for all the Best Sellers lists for specified date.
         * @summary Best Sellers List Overview
         * @param {string} [publishedDate] YYYY-MM-DD  The best-seller list publication date. You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published date, the current week\&#39;s best sellers lists will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBestSellersOverview: async (publishedDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/overview.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api-key", keyParamName: "apiKey", configuration})
            if (publishedDate !== undefined) {
                localVarQueryParameter['published_date'] = publishedDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/overview.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Best Sellers list by date.
         * @summary Best Sellers List by Date
         * @param {string} date YYYY-MM-DD or \&quot;current\&quot;  The date the best sellers list was published on NYTimes.com.  Use \&quot;current\&quot; to get latest list.
         * @param {string} list Name of the Best Sellers List (e.g. hardcover-fiction). You can get the full list of names from the /lists/names.json service.
         * @param {number} [offset] Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDate: async (date: string, list: string, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getByDate', 'date', date)
            // verify required parameter 'list' is not null or undefined
            assertParamExists('getByDate', 'list', list)
            const localVarPath = `/lists/{date}/{list}.json`
                .replace(`{${"date"}}`, encodeURIComponent(String(date !== undefined ? date : `-date-`)))
                .replace(`{${"list"}}`, encodeURIComponent(String(list !== undefined ? list : `-list-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api-key", keyParamName: "apiKey", configuration})
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/{date}/{list}.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Best Sellers list history.
         * @summary Best Sellers List History
         * @param {string} [ageGroup] The target age group for the best seller.
         * @param {string} [author] The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author\&#39;s first name.
         * @param {string} [contributor] The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.
         * @param {string} [isbn] International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229).
         * @param {number} [offset] Sets the starting point of the result set (0, 20, ...).  Used to paginate thru results if there are more than 20. Defaults to 0. The num_results field indicates how many results there are total.
         * @param {string} [price] The publisher\&#39;s list price of the best seller, including decimal point.
         * @param {string} [publisher] The standardized name of the publisher
         * @param {string} [title] The title of the best seller  When searching, you can specify a portion of a title or a full title.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (ageGroup?: string, author?: string, contributor?: string, isbn?: string, offset?: number, price?: string, publisher?: string, title?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/best-sellers/history.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api-key", keyParamName: "apiKey", configuration})
            if (ageGroup !== undefined) {
                localVarQueryParameter['age-group'] = ageGroup;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (contributor !== undefined) {
                localVarQueryParameter['contributor'] = contributor;
            }

            if (isbn !== undefined) {
                localVarQueryParameter['isbn'] = isbn;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }

            if (publisher !== undefined) {
                localVarQueryParameter['publisher'] = publisher;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/best-sellers/history.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Best Sellers list names.
         * @summary Best Sellers List Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNames: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/names.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject({object: localVarQueryParameter, key: "api-key", keyParamName: "apiKey", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/lists/names.json',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListApi - functional programming interface
 * @export
 */
export const ListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all books for all the Best Sellers lists for specified date.
         * @summary Best Sellers List Full Overview
         * @param {ListApiGetAllBestSellersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBestSellers(requestParameters: ListApiGetAllBestSellersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OverviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBestSellers(requestParameters.publishedDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Best Sellers list.  If no date is provided returns the latest list.
         * @summary Best Sellers List
         * @param {ListApiGetBestSellersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBestSellers(requestParameters: ListApiGetBestSellersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGetBestSellersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBestSellers(requestParameters.list, requestParameters.bestsellersDate, requestParameters.publishedDate, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get top 5 books for all the Best Sellers lists for specified date.
         * @summary Best Sellers List Overview
         * @param {ListApiGetBestSellersOverviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBestSellersOverview(requestParameters: ListApiGetBestSellersOverviewRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OverviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBestSellersOverview(requestParameters.publishedDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Best Sellers list by date.
         * @summary Best Sellers List by Date
         * @param {ListApiGetByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByDate(requestParameters: ListApiGetByDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGetByDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByDate(requestParameters.date, requestParameters.list, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Best Sellers list history.
         * @summary Best Sellers List History
         * @param {ListApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(requestParameters: ListApiGetHistoryRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGetHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(requestParameters.ageGroup, requestParameters.author, requestParameters.contributor, requestParameters.isbn, requestParameters.offset, requestParameters.price, requestParameters.publisher, requestParameters.title, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Best Sellers list names.
         * @summary Best Sellers List Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNames(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListGetNamesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNames(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListApi - factory interface
 * @export
 */
export const ListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListApiFp(configuration)
    return {
        /**
         * Get all books for all the Best Sellers lists for specified date.
         * @summary Best Sellers List Full Overview
         * @param {ListApiGetAllBestSellersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBestSellers(requestParameters: ListApiGetAllBestSellersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OverviewResponse> {
            return localVarFp.getAllBestSellers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Best Sellers list.  If no date is provided returns the latest list.
         * @summary Best Sellers List
         * @param {ListApiGetBestSellersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBestSellers(requestParameters: ListApiGetBestSellersRequest, options?: AxiosRequestConfig): AxiosPromise<ListGetBestSellersResponse> {
            return localVarFp.getBestSellers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get top 5 books for all the Best Sellers lists for specified date.
         * @summary Best Sellers List Overview
         * @param {ListApiGetBestSellersOverviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBestSellersOverview(requestParameters: ListApiGetBestSellersOverviewRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OverviewResponse> {
            return localVarFp.getBestSellersOverview(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Best Sellers list by date.
         * @summary Best Sellers List by Date
         * @param {ListApiGetByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDate(requestParameters: ListApiGetByDateRequest, options?: AxiosRequestConfig): AxiosPromise<ListGetByDateResponse> {
            return localVarFp.getByDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Best Sellers list history.
         * @summary Best Sellers List History
         * @param {ListApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(requestParameters: ListApiGetHistoryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListGetHistoryResponse> {
            return localVarFp.getHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Best Sellers list names.
         * @summary Best Sellers List Names
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNames(options?: AxiosRequestConfig): AxiosPromise<ListGetNamesResponse> {
            return localVarFp.getNames(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllBestSellers operation in ListApi.
 * @export
 * @interface ListApiGetAllBestSellersRequest
 */
export type ListApiGetAllBestSellersRequest = {
    
    /**
    * YYYY-MM-DD  The best-seller list publication date. You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published date, the current week\'s best sellers lists will be returned.
    * @type {string}
    * @memberof ListApiGetAllBestSellers
    */
    readonly publishedDate?: string
    
}

/**
 * Request parameters for getBestSellers operation in ListApi.
 * @export
 * @interface ListApiGetBestSellersRequest
 */
export type ListApiGetBestSellersRequest = {
    
    /**
    * The name of the Times best sellers list (hardcover-fiction, paperback-nonfiction, ...). The /lists/names service returns all the list names. The encoded list names are lower case with hyphens instead of spaces (e.g. e-book-fiction, instead of E-Book Fiction).
    * @type {string}
    * @memberof ListApiGetBestSellers
    */
    readonly list: string
    
    /**
    * YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best sellers lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29).
    * @type {string}
    * @memberof ListApiGetBestSellers
    */
    readonly bestsellersDate?: string
    
    /**
    * YYYY-MM-DD  The date the best sellers list was published on NYTimes.com (different than bestsellers-date).  Use \"current\" for latest list.
    * @type {string}
    * @memberof ListApiGetBestSellers
    */
    readonly publishedDate?: string
    
    /**
    * Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.
    * @type {number}
    * @memberof ListApiGetBestSellers
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getBestSellersOverview operation in ListApi.
 * @export
 * @interface ListApiGetBestSellersOverviewRequest
 */
export type ListApiGetBestSellersOverviewRequest = {
    
    /**
    * YYYY-MM-DD  The best-seller list publication date. You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published date, the current week\'s best sellers lists will be returned.
    * @type {string}
    * @memberof ListApiGetBestSellersOverview
    */
    readonly publishedDate?: string
    
}

/**
 * Request parameters for getByDate operation in ListApi.
 * @export
 * @interface ListApiGetByDateRequest
 */
export type ListApiGetByDateRequest = {
    
    /**
    * YYYY-MM-DD or \"current\"  The date the best sellers list was published on NYTimes.com.  Use \"current\" to get latest list.
    * @type {string}
    * @memberof ListApiGetByDate
    */
    readonly date: string
    
    /**
    * Name of the Best Sellers List (e.g. hardcover-fiction). You can get the full list of names from the /lists/names.json service.
    * @type {string}
    * @memberof ListApiGetByDate
    */
    readonly list: string
    
    /**
    * Sets the starting point of the result set (0, 20, ...).  Used to paginate thru books if list has more than 20. Defaults to 0.  The num_results field indicates how many books are in the list.
    * @type {number}
    * @memberof ListApiGetByDate
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getHistory operation in ListApi.
 * @export
 * @interface ListApiGetHistoryRequest
 */
export type ListApiGetHistoryRequest = {
    
    /**
    * The target age group for the best seller.
    * @type {string}
    * @memberof ListApiGetHistory
    */
    readonly ageGroup?: string
    
    /**
    * The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author\'s first name.
    * @type {string}
    * @memberof ListApiGetHistory
    */
    readonly author?: string
    
    /**
    * The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed.
    * @type {string}
    * @memberof ListApiGetHistory
    */
    readonly contributor?: string
    
    /**
    * International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229).
    * @type {string}
    * @memberof ListApiGetHistory
    */
    readonly isbn?: string
    
    /**
    * Sets the starting point of the result set (0, 20, ...).  Used to paginate thru results if there are more than 20. Defaults to 0. The num_results field indicates how many results there are total.
    * @type {number}
    * @memberof ListApiGetHistory
    */
    readonly offset?: number
    
    /**
    * The publisher\'s list price of the best seller, including decimal point.
    * @type {string}
    * @memberof ListApiGetHistory
    */
    readonly price?: string
    
    /**
    * The standardized name of the publisher
    * @type {string}
    * @memberof ListApiGetHistory
    */
    readonly publisher?: string
    
    /**
    * The title of the best seller  When searching, you can specify a portion of a title or a full title.
    * @type {string}
    * @memberof ListApiGetHistory
    */
    readonly title?: string
    
}

/**
 * ListApiGenerated - object-oriented interface
 * @export
 * @class ListApiGenerated
 * @extends {BaseAPI}
 */
export class ListApiGenerated extends BaseAPI {
    /**
     * Get all books for all the Best Sellers lists for specified date.
     * @summary Best Sellers List Full Overview
     * @param {ListApiGetAllBestSellersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getAllBestSellers(requestParameters: ListApiGetAllBestSellersRequest = {}, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getAllBestSellers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Best Sellers list.  If no date is provided returns the latest list.
     * @summary Best Sellers List
     * @param {ListApiGetBestSellersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getBestSellers(requestParameters: ListApiGetBestSellersRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getBestSellers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get top 5 books for all the Best Sellers lists for specified date.
     * @summary Best Sellers List Overview
     * @param {ListApiGetBestSellersOverviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getBestSellersOverview(requestParameters: ListApiGetBestSellersOverviewRequest = {}, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getBestSellersOverview(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Best Sellers list by date.
     * @summary Best Sellers List by Date
     * @param {ListApiGetByDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getByDate(requestParameters: ListApiGetByDateRequest, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getByDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Best Sellers list history.
     * @summary Best Sellers List History
     * @param {ListApiGetHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getHistory(requestParameters: ListApiGetHistoryRequest = {}, options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Best Sellers list names.
     * @summary Best Sellers List Names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApiGenerated
     */
    public getNames(options?: AxiosRequestConfig) {
        return ListApiFp(this.configuration).getNames(options).then((request) => request(this.axios, this.basePath));
    }
}
